name: Smart Release - VS Code Extension

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'  # Âè™Âú®package.jsonÂèòÂåñÊó∂Ëß¶Âèë
  workflow_dispatch: # ÂÖÅËÆ∏ÊâãÂä®Ëß¶Âèë

# Ê∑ªÂä†ÊòéÁ°ÆÁöÑÊùÉÈôêÈÖçÁΩÆ
permissions:
  contents: write
  packages: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      version: ${{ steps.check.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Ëé∑ÂèñÂÆåÊï¥ÂéÜÂè≤‰ª•ÊØîËæÉÁâàÊú¨
        
    - name: Check if version changed
      id: check
      run: |
        # Ëé∑ÂèñÂΩìÂâçÁâàÊú¨
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        
        # Ëé∑Âèñ‰∏ä‰∏Ä‰∏™Êèê‰∫§ÁöÑÁâàÊú¨
        PREVIOUS_VERSION=$(git show HEAD~1:package.json 2>/dev/null | node -p "JSON.parse(require('fs').readFileSync(0, 'utf8')).version" 2>/dev/null || echo "0.0.0")
        echo "Previous version: $PREVIOUS_VERSION"
        
        # Ê£ÄÊü•ÁâàÊú¨ÊòØÂê¶ÂèòÂåñ
        if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
          echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          echo "should-release=true" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        else
          echo "Version unchanged: $CURRENT_VERSION"
          echo "should-release=false" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        fi

  build-and-release:
    needs: check-version
    if: needs.check-version.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build extension
      run: npm run compile
      
    - name: Get version
      id: get_version
      run: |
        VERSION=${{ needs.check-version.outputs.version }}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
        
    - name: Package extension
      run: npm run package
      
    - name: Create VSIX filename
      id: filename
      run: |
        VERSION=${{ steps.get_version.outputs.version }}
        FILENAME="jsonstr-$VERSION.vsix"
        echo "filename=$FILENAME" >> $GITHUB_OUTPUT
        echo "VSIX filename: $FILENAME"
        
    - name: Upload VSIX artifact
      uses: actions/upload-artifact@v4
      with:
        name: vscode-extension
        path: ${{ steps.filename.outputs.filename }}
        
    - name: Publish to VS Code Marketplace
      run: |
        # ÂÆâË£Övsce
        npm install -g @vscode/vsce
        
        # È™åËØÅpackage.json
        echo "Validating package.json..."
        node -e "
          const pkg = require('./package.json');
          console.log('Name:', pkg.name);
          console.log('Version:', pkg.version);
          console.log('Publisher:', pkg.publisher);
          console.log('DisplayName:', pkg.displayName);
          console.log('Description:', pkg.description);
        "
        
        # È™åËØÅVSIXÊñá‰ª∂
        echo "Validating VSIX file..."
        vsce verify ${{ steps.filename.outputs.filename }}
        
        # ÂèëÂ∏ÉÂà∞marketplace
        echo "Publishing to VS Code Marketplace..."
        vsce publish --pat ${{ secrets.VSCE_PAT }} --packagePath ${{ steps.filename.outputs.filename }}
      env:
        VSCE_PAT: ${{ secrets.VSCE_PAT }}
        
    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        name: Release v${{ steps.get_version.outputs.version }}
        body: |
          ## JSON String Converter Extension v${{ steps.get_version.outputs.version }}
          
          ### üöÄ What's New
          - Auto-built and published to VS Code Marketplace
          - Version: ${{ steps.get_version.outputs.version }}
          
          ### üì¶ Installation
          **From VS Code Marketplace:**
          1. Open VS Code
          2. Go to Extensions (Ctrl+Shift+X)
          3. Search for "jsonstr"
          4. Click Install
          
          **Manual Installation:**
          1. Download the `.vsix` file from this release
          2. Open VS Code
          3. Go to Extensions (Ctrl+Shift+X)
          4. Click the "..." menu and select "Install from VSIX..."
          5. Select the downloaded file
          
          ### ‚ú® Features
          - JSON format detection and conversion
          - Auto-detection mode (configurable)
          - Preserve indentation format
          - Silent mode support
          - Shortcut: Ctrl+Shift+T (Windows/Linux) or Cmd+Shift+T (Mac)
          
          ### üîß Configuration
          - Auto-detection: `jsonstr.autoDetection`
          - Preserve indentation: `jsonstr.preserveIndentation`
          - Show notifications: `jsonstr.showNotifications`
        files: ${{ steps.filename.outputs.filename }}
        draft: false
        prerelease: false
        generate_release_notes: true
        
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üéâ **Extension v${{ steps.get_version.outputs.version }} published!**
            
            ‚úÖ Built and published to VS Code Marketplace
            üì¶ VSIX file available in release artifacts
            üîó [View Release](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/v${{ steps.get_version.outputs.version }})
            `
          })